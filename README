A project to make a weird roguelike in Python using curses
Run with `python3 rockslike.py` (or go back to the root Quarry directory and do `./rockslike`)

Python's curses module: 
https://docs.python.org/howto/curses.html
https://docs.python.org/library/curses.html

Everyone is welcome to contribute - a design goal is to make adding new features and designing maps relatively easy and straightforward. 
For the sake of preserving a modicum of sanity, this folder is a git repo, so please use commits. Branches are also welcome.


A little bit of command-line git:
`git status` to see the current state of your working directory - red files are changed,
	green files are staged for commiting
`git diff` to review the changes you've made since the last commit and make sure they're what you want
`git add [filenames]` to stage files for your commit
`git add -p [filenames]` to stage only parts of files (which is a good way to break your commits into
	atomic pieces if you changed a bunch of stuff without committing)
`git commit` to prompt for a commit message and then commit added files

And if you want to fork the code, or just work on it in the relative safety of your home folder,
`git clone /home/Quarry/src/rockslike` (while you're in the parent folder of where you want the clone to go)
which will allow you to
`git pull` to get changes from the Quarry version
`git push` to copy your changes over to the Quarry version
I recommend you pull often and make small commits to avoid merge headaches.

`git help` and `git help [command]` will tell you more.


STRUCTURE:
rockslike.py: Execution starts here. Contains curses setup and the main game loop
gameworld.py: Holds the state of the game world
keyinput.py: Handles keyboard input
events.py: Handles observer-pattern event listening
mapfeatures.py: Holds static game elements, like walls and floors
entities.py: Holds dynamic game elements, like the player
tile.py: Deals with the visual appearance of things: ASCII characters and curses colors
debugoutput.py: Offers a way to print debug messages into curses
parsemap.py: Reads maps defined in text files

maps/: You can put maps here if you want to
